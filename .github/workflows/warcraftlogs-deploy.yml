name: Databricks Bundle CI
 
on:
  workflow_dispatch:
    inputs:
      job_to_run:
        type: choice
        description: 'operation:'
        required: true
        default: 'deploy-only'
        options:
          - deploy-only
          - run-bronze
          - pause-bronze
      report_ids:
        description: 'JSON array of report IDs (only for run-bronze)'
        required: false
        default: '[]'
 
env:
  DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
  DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
 
jobs:
 
  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  deploy-only:
    name: ‚úÖ Validate & Deploy Bundle
    if: ${{ inputs.job_to_run == 'deploy-only' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
 
      - name: üõ†Ô∏è Install & configure Databricks CLI
        uses: databricks/setup-cli@main
        with:
          host: ${{ env.DATABRICKS_HOST }}
          token: ${{ env.DATABRICKS_TOKEN }}
 
      - name: üîç Validate bundle
        working-directory: warcraftlogs-raid-analysis
        run: databricks bundle validate
 
      - name: üöÄ Deploy bundle
        working-directory: warcraftlogs-raid-analysis
        run: databricks bundle deploy --force-lock
 
  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  run-bronze:
    name: üîÅ Deploy (if needed) & Run Bronze
    if: ${{ inputs.job_to_run == 'run-bronze' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
 
      - name: üõ†Ô∏è Install & configure Databricks CLI
        uses: databricks/setup-cli@main
        with:
          host: ${{ env.DATABRICKS_HOST }}
          token: ${{ env.DATABRICKS_TOKEN }}
 
      - name: ‚úÖ Validate & üöÄ Deploy Bundle
        working-directory: warcraftlogs-raid-analysis
        run: |
          databricks bundle validate
          databricks bundle deploy --force-lock
 
      - name: ‚ñ∂Ô∏è Run Bronze Ingestion
        working-directory: warcraftlogs-raid-analysis
        run: |
          echo "Incoming report IDs: ${{ inputs.report_ids }}"
          for id in $(echo '${{ inputs.report_ids }}' | jq -r '.[]'); do
            echo " ‚Ä¢ Running bronze job for $id"
            databricks bundle run bronze-ingestion-extraction-job \
              --refresh-all \
              --params report_id=$id
          done
 
  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  pause-bronze:
    name: ‚è∏Ô∏è Pause Bronze Job
    if: ${{ inputs.job_to_run == 'pause-bronze' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
 
      - name: üõ†Ô∏è Install & configure Databricks CLI
        uses: databricks/setup-cli@main
        with:
          host: ${{ env.DATABRICKS_HOST }}
          token: ${{ env.DATABRICKS_TOKEN }}
 
      - name: üîé Look up job ID
        id: lookup
        run: |
          JOB_ID=$(databricks jobs list --name "bronze-ingestion-extraction-job" --output json \
            | jq -r '.[0].job_id')
          echo "::set-output name=job_id::$JOB_ID"

      - name: üîé Fetch current schedule
        id: fetch
        run: |
          JOB_ID=${{ steps.lookup.outputs.job_id }}
          echo "Looking up job $JOB_ID"
          JOB_JSON=$(databricks jobs get \
            $JOB_ID \
            --output JSON)
          CRON=$(echo "$JOB_JSON" | jq -r '.settings.schedule.quartz_cron_expression')
          TZ=$(echo "$JOB_JSON" | jq -r '.settings.schedule.timezone_id')
          echo "cron=$CRON" >> $GITHUB_OUTPUT
          echo "tz=$TZ"   >> $GITHUB_OUTPUT
       
      - name: ‚è∏Ô∏è Pause schedule (full payload)
        run: |
          databricks jobs update --json "{
            \"job_id\": $JOB_ID,
            \"new_settings\": {
              \"schedule\": {
                \"quartz_cron_expression\": \"${{ steps.fetch.outputs.cron }}\",
                \"timezone_id\": \"${{ steps.fetch.outputs.tz }}\",
                \"pause_status\": \"PAUSED\"
              } 
            }
          }"
